name: conditions tester

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  init:
    runs-on: ubuntu-latest

    outputs: 
      runDev: ${{ steps.set_output.outputs.runDev }}
      runProd: ${{ steps.set_output.outputs.runProd }}
      devApprovalNeeded: ${{ steps.set_output.outputs.devApprovalNeeded }}

    steps:
      - name: Run tests
        run: echo "Running init"

      - name: set output
        id: set_output
        run: |
          echo "runDev=true" >> $GITHUB_OUTPUT
          echo "runProd=true" >> $GITHUB_OUTPUT
          echo "devApprovalNeeded=false" >> $GITHUB_OUTPUT

      - name: save stage state
        run: echo $GITHUB_JOB > stage_state

      - name: archive state file
        uses: actions/upload-artifact@v4
        with:
          name: stage_state
          path: stage_state
          overwrite: true
  
  deployDev:
    runs-on: ubuntu-latest
    name: Deploy to DEV
    environment: DEV
    needs: init

    if: needs.init.outputs.runDev == 'true'
    
    steps:
      - name: deploy dev
        run: echo "Deploying to DEV" >> $GITHUB_STEP_SUMMARY

      - name: get stage state
        uses: actions/download-artifact@v4
        with:
          name: stage_state

      - name: read stage state
        run: echo "previous job was $(cat stage_state)"

      - name: save stage state
        run: echo $GITHUB_JOB > stage_state

      - name: archive state file
        uses: actions/upload-artifact@v4
        with:
          name: stage_state
          path: stage_state
          overwrite: true
  
  deployDevAutoApprove:
    runs-on: ubuntu-latest
    name: Deploy to DEV Auto Approve
    needs: init

    if: needs.init.outputs.runDev == 'true' && needs.init.outputs.devApprovalNeeded != 'true'

    steps:
      - name: deploy dev auto approve
        run: echo "Deploying to DEV Auto Approve" >> $GITHUB_STEP_SUMMARY
      
      - name: Get Environment Id
        id: environment-id
        run: |
          gh api -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28"         \
            /repos/${{ github.repository }}/environments > envs

          environmentId=$(cat envs | jq -r '.environments[] | select(.name=="DEV") | .id')

          # Set output
          echo "envId::$environmentId" >> $GITHUB_ENV
      
      - name: Show me Environment Id
        run: |
          echo "Environment Id for Prod is $envId"


  deployProd:
    runs-on: ubuntu-latest
    name: Deploy to PROD
    environment: PRD
    needs: [init, deployDev]

    if: ${{ needs.init.outputs.runProd == 'true' }}

    steps:
      - name: deploy prod
        run: echo "Deploying to PRD" >> $GITHUB_STEP_SUMMARY

      - name: get stage state
        uses: actions/download-artifact@v4
        with:
          name: stage_state

      - name: read stage state
        run: echo "previous job was $(cat stage_state)"
