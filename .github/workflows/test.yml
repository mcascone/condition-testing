name: conditions tester

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  init:
    runs-on: ubuntu-latest

    outputs: 
      runDev: ${{ steps.set_output.outputs.runDev }}
      runProd: ${{ steps.set_output.outputs.runProd }}
      devApprovalNeeded: ${{ steps.set_output.outputs.devApprovalNeeded }}

    steps:
      - name: Run tests
        run: echo "Running init"

      - name: set output
        id: set_output
        run: |
          echo "runDev=true" >> $GITHUB_OUTPUT
          echo "runProd=true" >> $GITHUB_OUTPUT
          echo "devApprovalNeeded=false" >> $GITHUB_OUTPUT

      - name: save stage state
        run: echo $GITHUB_JOB > stage_state

      - name: archive state file
        uses: actions/upload-artifact@v4
        with:
          name: stage_state
          path: stage_state
          overwrite: true
  
  deployDev:
    runs-on: ubuntu-latest
    name: Deploy to DEV
    environment: DEV
    needs: init

    if: needs.init.outputs.runDev == 'true'
    
    steps:
      - name: deploy dev
        run: echo "Deploying to DEV" >> $GITHUB_STEP_SUMMARY

      - name: get stage state
        uses: actions/download-artifact@v4
        with:
          name: stage_state

      - name: read stage state
        run: echo "previous job was $(cat stage_state)" >> $GITHUB_STEP_SUMMARY

      - name: save stage state
        run: echo $GITHUB_JOB > stage_state

      - name: archive state file
        uses: actions/upload-artifact@v4
        with:
          name: stage_state
          path: stage_state
          overwrite: true
  
  deployDevAutoApprove:
    runs-on: ubuntu-latest
    name: Deploy to DEV Auto Approve
    needs: init

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN_FOR_AUTO_APPROVING_DEPLOYS_ }}

    if: needs.init.outputs.runDev == 'true' && needs.init.outputs.devApprovalNeeded != 'true'

    steps:
      - run: echo "Deploy to DEV Auto Approved" >> $GITHUB_STEP_SUMMARY
      
      - name: Get Environment Id
        id: environment-id
        run: |
          envs=$(gh api repos/${{ github.repository }}/environments)

          environmentId=$(echo $envs | jq -r '.environments[] | select(.name=="DEV") | .id')
          echo "ENVID=$environmentId" >> $GITHUB_ENV
      
      # only approve if there are pending deployments in the current run
      # TODO: the caleld action will likely still catch deploys in other runs... not what we want
      - name: Get Pending Deployments
        id: pending-deployments
        run: |
          result = $(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/pending_deployments)

          pending=false
          if [ -ne '[]' $result ]; then
            pending=true
          fi

          echo "pending=$pending" >> $GITHUB_OUTPUT
      
      - name: Approve Pending Deployment
        if: steps.pending-deployments.outputs.pending == 'true'
        uses: ./
        with:
          environment_allow_list: |
            DEV
          actor_allow_list: |
            dependabot[bot]
            mcascone

  deployProd:
    runs-on: ubuntu-latest
    name: Deploy to PROD
    environment: PRD
    needs: [init, deployDev]

    if: ${{ needs.init.outputs.runProd == 'true' }}

    steps:
      - name: deploy prod
        run: echo "Deploying to PRD" >> $GITHUB_STEP_SUMMARY

      - name: get stage state
        uses: actions/download-artifact@v4
        with:
          name: stage_state

      - name: read stage state
        run: echo "previous job was $(cat stage_state)" >> $GITHUB_STEP_SUMMARY
